[#ftl]
[#macro aws_backupstore_cf_deployment_generationcontract_solution occurrence ]
    [@addDefaultGenerationContract subsets=["deploymentcontract", "template"] /]
[/#macro]

[#macro aws_backupstore_cf_deployment_deploymentcontract occurrence ]
    [@addDefaultAWSDeploymentContract /]
[/#macro]

[#macro aws_backupstore_cf_deployment_solution occurrence ]
    [@debug message="Entering" context=occurrence enabled=false /]

    [#local core = occurrence.Core ]
    [#local solution = occurrence.Configuration.Solution ]
    [#local attributes = occurrence.State.Attributes ]
    [#local resources = occurrence.State.Resources]

    [#local vaultId = resources["vault"].Id ]
    [#local vaultName = resources["vault"].Name ]
    [#local roleId = resources["role"].Id ]

    [#-- Determine the encryption key if required --]
    [#local encryptionKeyId = "" ]
    [#if isPresent(solution.Encryption) ]
        [#-- Baseline component lookup to obtain the kms key --]
        [#local baselineLinks = getBaselineLinks(occurrence, [ "Encryption" ]) ]
        [#local baselineComponentIds = getBaselineComponentIds(baselineLinks)]
        [#local encryptionKeyId = baselineComponentIds[ "Encryption" ]!""]
    [/#if]

    [#-- Create the IAM role for performing snapshots --]
    [#if deploymentSubsetRequired("iam", true) && isPartOfCurrentDeploymentUnit(roleId) ]
        [@createRole
            id=roleId
            trustedServices="backup.amazonaws.com"
            managedArns=[
                "arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup",
                "arn:aws:iam::aws:policy/AWSBackupServiceRolePolicyForS3Backup"
            ]
        /]
    [/#if]

    [#if deploymentSubsetRequired(BACKUPSTORE_COMPONENT_TYPE, true) ]

        [#-- Determine any notification requirements --]
        [#local notifications = [] ]
        [#list solution.Notifications?values as notification]
            [#if notification.Enabled ]
                [#-- Look for any link to a topic --]
                [#list notification.Links?values as link]
                    [#if link?is_hash]

                        [#-- Look up the target - it must be a topic --]
                        [#local linkTarget = getLinkTarget(occurrence, {"Type" : TOPIC_COMPONENT_TYPE} + link) ]

                        [#if !linkTarget?has_content]
                            [#continue]
                        [/#if]

                        [#local notifications =
                            addBackupNotification(
                                notifications,
                                (linkTarget.State.Attributes["ARN"])!"",
                                notification.Events
                            )
                        ]
                    [/#if]
                [/#list]
            [/#if]
        [/#list]

        [#-- Determine if the vault should be locked --]
        [#local lockConfiguration = {} ]
        [#if isPresent(solution.Lock) ]
            [#local lockConfiguration =
                getBackupLockConfiguration(
                    solution.Lock.MinRetention,
                    solution.Lock.MaxRetention
                )
            ]
        [/#if]

        [#-- Create the vault --]
        [@createBackupVault
            id=vaultId
            name=vaultName
            encryptionKeyId=encryptionKeyId
            notifications=notifications
            lockConfiguration=lockConfiguration
            tags=getOccurrenceTags(occurrence)
        /]

        [#-- Create the regimes associated with the vault --]
        [#list (occurrence.Occurrences![])?filter(x -> x.Configuration.Solution.Enabled ) as subOccurrence]

            [#local subCore = subOccurrence.Core ]
            [#local subSolution = subOccurrence.Configuration.Solution ]
            [#local subResources = subOccurrence.State.Resources ]
            [#local subAttributes = subOccurrence.State.Attributes ]

            [#if ! subSolution.Enabled]
                [#continue]
            [/#if]

            [#if ! subSolution.Rules?has_content]
                [@fatal
                    message="A backup regime must have at least one rule"
                    context=subSolution
                /]
                [#continue]
            [/#if]

            [#local planId = subResources["plan"].Id ]
            [#local planName = subResources["plan"].Name ]
            [#local selectionId = subResources["selection"].Id ]
            [#local selectionName = subResources["selection"].Name ]

            [#local rules = [] ]
            [#list subSolution.Rules as ruleName, rule]

                [#-- Lifecycle for the snapshots generated by the rule --]
                [#local lifecycle = {} ]
                [#if isPresent(rule.Lifecycle) ]
                    [#local offline = rule.Lifecycle.Offline ]
                    [#local expiration = rule.Lifecycle.Expiration ]
                    [#if (offline > 0) && (expiration > 0) && (expiration <= offline) ]
                        [@fatal
                            message="Snapshot must expire after it has moved to offline storage"
                            context=lifecycle
                        /]
                        [#return]
                    [/#if]
                    [#local lifecycle = getBackupLifecycle(offline, expiration) ]
                [/#if]

                [#-- Any additional stores to copy the backups to --]
                [#local copies = [] ]
                [#list rule.Copies?values as link]
                    [#if link?is_hash]

                        [#-- Look up the target - it must be a backup store --]
                        [#local linkTarget = getLinkTarget(occurrence, {"Type" : BACKUPSTORE_COMPONENT_TYPE} + link) ]

                        [#if !linkTarget?has_content]
                            [#continue]
                        [/#if]

                        [#local copies =
                            addBackupCopyAction(
                                copies,
                                (linkTarget.State.Attributes["ARN"])!""
                            )
                        ]
                    [/#if]
                [/#list]

                [#local rules =
                    addBackupRule(
                        rules,
                        formatComponentFullName(
                            subCore.Tier,
                            subCore.Component,
                            subOccurrence,
                            (ruleName == "default")?then("", ruleName)
                        ),
                        vaultId,
                        rule.Schedule.Expression!"",
                        lifecycle,
                        rule.StartWindow,
                        rule.FinishWindow,
                        rule.Schedule.PointInTimeSupport,
                        copies
                    )
                ]
            [/#list]


            [#-- Create the plan --]
            [@createBackupPlan
                id=planId
                name=planName
                rules=rules
                tags=getOccurrenceTags(subOccurrence)
            /]

            [#-- Check if store matches are required --]
            [#local conditions = {} ]
            [#if isPresent(subSolution.Conditions.MatchesStore) ]

                [#list ["Product","Environment","Segment","Tier"] as tag]
                    [#if subSolution.Conditions.MatchesStore[tag]!false]
                        [#local conditionValue = "HamletFatal: Unknown backup condition tag" ]
                        [#local tagValue = "HamletFatal: Unknown backup condition tag"]
                        [#switch tag]
                            [#case "Product"]
                                [#local tagValue = "cot:product" ]
                                [#local conditionValue = productName ]
                                [#break]
                            [#case "Environment"]
                                [#local tagValue = "cot:environment" ]
                                [#local conditionValue = environmentName ]
                                [#break]
                            [#case "Segment"]
                                [#local tagValue = "cot:segment" ]
                                [#local conditionValue = segmentName ]
                                [#break]
                            [#case "Tier"]
                                [#local tagValue = "cot:tier" ]
                                [#local conditionValue = getTierName(core.Tier) ]
                                [#break]
                        [/#switch]

                        [#local conditions =
                            addBackupSelectionCondition(
                                conditions,
                                tagValue,
                                conditionValue,
                                "tag"
                            )
                        ]
                    [/#if]
                [/#list]
            [/#if]

            [#-- Check if all resource should be considered --]
            [#local includedResources = [] ]
            [#if isPresent(subSolution.Targets.All) ]
                [#local includedResources = ["*"] ]
            [/#if]

            [#-- Check for any specific resources to be included --]
            [#list subSolution.Targets.Components.Inclusions?values as link]
                [#if link?is_hash]

                    [#-- Look up the target --]
                    [#local linkTarget = getLinkTarget(occurrence, link) ]

                    [#if !linkTarget?has_content]
                        [#continue]
                    [/#if]

                    [#local resourceArn = (linkTarget.State.Attributes["ARN"])!"" ]
                    [#if resourceArn?has_content]
                        [#local includedResources += [resourceArn] ]
                    [#else]
                        [@fatal
                            message="Linked resource does not provide an ARN attribute required for backup configuration"
                            context=linkTarget.Core
                        /]
                        [#return]
                    [/#if]
                [/#if]
            [/#list]

            [#-- Check for any specific resources to be excluded --]
            [#local excludedResources = [] ]
            [#list subSolution.Targets.Components.Exclusions?values as link]
                [#if link?is_hash]

                    [#-- Look up the target --]
                    [#local linkTarget = getLinkTarget(occurrence, link) ]

                    [#if !linkTarget?has_content]
                        [#continue]
                    [/#if]

                    [#local resourceArn = (linkTarget.State.Attributes["ARN"])!"" ]
                    [#if resourceArn?has_content]
                        [#local excludedResources += [resourceArn] ]
                    [#else]
                        [@fatal
                            message="Linked resource does not provide an ARN attribute required for backup configuration"
                            context=linkTarget.Core
                        /]
                        [#return]
                    [/#if]
                [/#if]
            [/#list]

            [#-- Check if tagging is to be supported - target component needs to be linked to the regime --]
            [#local tags = [] ]
            [#if isPresent(subSolution.Targets.Tag) ]
                [#local tags =
                    addBackupSelectionTag(
                        tags,
                        subAttributes["TAG_NAME"],
                        subAttributes["TAG_VALUE"]
                    )
                ]
            [/#if]

            [#-- Select the targets --]
            [@createBackupSelection
                id=selectionId
                name=selectionName
                planId=planId
                roleId=roleId
                tags=tags
                resources=includedResources
                conditions=conditions
                exclusions=excludedResources
            /]
        [/#list]
    [/#if]
[/#macro]
